configuracion de git

git init para
git show-branch --all:mostrar branch ocultos
git rm --cached archivo.html =>quitar de ram,el archivo aun no esta guadado en disco quita el add
git rm archivo.txt.=>el archivo ya esta guardado en disco y lo remueve.
git remote  add (origin)o(uptream)(link de un repo)=> sirve para agregar un repo  remoto.
pull request=>es un intermedio  de un merge sirve para q otros desarrolladores evaluen tu codigo
fork o bifurcacion se lo utiliza para clonar procyectos a mi GitHub desde github.
git config=muestra todas las configuraciones de git
git config --list=muestra toda la configuracion por defecto
git config --list --show-origin=muetra dnd estan las configuraciones guardadas
git config global user.name "name"=>esto cambiara todos los usuarios globales (el nombre va entre comillas dobles)
git config global user.email "email"=>aca colocamos el correo electronico en cmillas dobles
git log (nombre del archivo)=muestra el historial de commit
git show(nombre del archivo)=muestra los cambios q se efectuaron en el archivo.
git diff =muestra las diferencias entre 2 archivos.
hay 2 tipos de reset hard (duro) y  soft(sueve):
git reset(#comint) --hard =nos permite volver todo a una version anterior del archivo(colocando el numero de comint)borra todo el archivo y vuelve al comit anterior.
git reset(#comint) --soft =nos permite volver  a una version anterior del archivo pero conservando staying area(colocando el numero de comint)
git log --stat= muestra los cambio especificos en todos los archivos.
git checkout (numero de commit) nombre del archivo de regreso = muetra y regresa a como era el archivo en ese momento del commit.
git checkout (master nombre del archivo de regreso)=regresa al archivo actual.
<!-- branch -->
git branch -> muestra todas las ramas
git branch $nombreDeLaNuevaRama -> crea un branch nuevos
git checkout $nombreDeBranch -> Cambia de branch
git merge $nombreDeBranch -> fuciona dos ramas(hay q pararse en la rama a unir)

<!-- comandos para traer data del repositorio remoto -->
git fetch -> descarga y actualiza un estado del repositorio remoto al repositorio local pero no al directorio de trabajo.
git merge (nombre de la rama a unir) -> deacarga y actualiza  los archivos en el directorio de trabajo .
git pull (origin o uptream) y la rama (master) -> descarga y actualiza un estado del repositorio remoto al repositorio local y a los archivos(directorio de trabajo) (osea combina un fetch y un merge)
git push (origin o uptream) y la rama (master)=>subre los archivos a github

<!-- comandos para ver estados -->
git status -> muestra el estado del commit antes de enviarse
git log -> muestra un registro de los commits
git commit -am =  esto  hace un git add . de un archivo ya existente.

GitHub
blame=muestra quienes a generado commit
git pull  origin master --allow-unrelated-histories = sirve para forzar el merges

Crear una llave ssh
ssh-keygen -t rsa -b 4096 -C "deangelisricardoexequiel@gmail.com"= especifica que algoritmo de cifrado vamos a usar en este caso rsa y -su complejidad e email.

revisando el servidor de ssh  en windows

eval $(ssh-agent -s) = nos deber entretgar Agent pid 2528 significa q el proceso esta corriendo.

$ ssh-add ~/.ssh/id_rsa = agrega mi llave ssh privada a mi  repo.

~ =es nuetro home.

$ git remote set-url  origin git@github.com:RicardoDeAngelis/hyperblog.git= cambiar la url del repo.
git remote -v => para ver las url de las repos
git log --all --graph = muestra la representacion grafica de los commit y branch

git log --all --graph --decorate --oneline = muestra todo mas comprimido.

$ alias arbol="git log --all --graph --decorate --oneline"  = usamos alias para no escribir un comando tan largo.

git tag = ver los tag que tenemos disponibles

git tag -d nombre=elimina un tag del repo interno.

git push origin :refs/tags/nombre = elimina tag de todos los repos.

gitk:abre un software visual.

fusionar ramas(flujo de trabajo)

git clone (url del repo).
primero  q nada se den¿be enviar una invitacion  o recibir una para poder
ser colaborador ya sea por username o email esto se lo configura en setting del repo.


Readme.md es una excelente práctica

README.md es una excelente práctica en tus proyectos, md significa Markdown es un especie de código que te permite cambiar la manera en que se ve un archivo de texto.

Lo interesante de Markdown es que funciona en muchas páginas, por ejemplo la edición en Wikipedia; es un lenguaje intermedio que no es HTML, no es texto plano, es una manera de crear excelentes texto formateados.




Git Rebase: Reorganizando el trabajo realizado

El comando rebase es una mala práctica, nunca se debe usar, pero para efectos de curso te lo vamos a enseñar para que hagas tus propios experimentos. Con rebase puedes recoger todos los cambios confirmados en una rapa y ponerlos sobre otra.

# Cambiamos a la rama que queremos traer los cambios
git checkout experiment
# Aplicamos rebase para traer los cambios de la rama que queremos 
git rebase master



Git Stash: Guardar cambios en memoria y recuperarlos después

Cuando necesitamos regresar en el tiempo porque borramos alguna línea de código pero no queremos pasarnos a otra rama porque nos daría un error ya que debemos pasar ese “mal cambio” que hicimos a stage, podemos usar git stash para regresar el cambio anterior que hicimos.

git stash es típico cuando estamos cambios que no merecen una rama o no merecen un rebase si no simplemente estamos probando algo y luego quieres volver rápidamente a tu versión anterior la cual es la correcta.



git stash = guarda los cambios en memoria cuando no quieres hacer un commit aun
git stash save “mensaje” = guarda un stach con mensaje
git stash list = lista de todos stash
git stash pop = trae de vuelta los cambios que teniamos guardados en el ultimo stash
git stash apply stash@{n} = trae el stash que necesites con indicar su numero dentro de las llaves
git stash drop = borra el ultimo stash
git stash clear = borra todos los stash


Git Clean: Limpiar tu proyecto de archivos no deseados

A veces creamos archivos cuando estamos realizando nuestro proyecto que realmente no forman parte de nuestro directorio de trabajo, que no se debería agregar y lo sabemos.

    Para saber qué archivos vamos a borrar tecleamos git clean --dry-run
    Para borrar todos los archivos listados (que no son carpetas) tecleamos git clean -f


    
    git clean --dry-run: Para saber qué archivos vamos a borrar cuando estan repetidos o no son de nuestro proyecto
    git clean -f: Para borrar todos los archivos listados (No borra las carpetas y lo que esta en .gitignore)



Git cherry-pick: Traer commits viejos al head de un branch

Existe un mundo alternativo en el cual vamos avanzando en una rama pero necesitamos en master uno de esos avances de la rama, para eso utilizamos el comando git cherry-pick IDCommit.

cherry-pick es una mala práctica porque significa que estamos reconstruyendo la historia, usa cherry-pick con sabiduría. Si no sabes lo que estás haciendo ten mucho cuidado.

Reconstruír commits en Git con amend

A veces hacemos un commit, pero resulta que no queríamos mandarlo porque faltaba algo más. Utilizamos git commit --amend, amend en inglés es remendar y lo que hará es que los cambios que hicimos nos lo agregará al commit anterior